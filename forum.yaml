openapi: 3.0.0
servers: []
info:
  description: 'Api to create, consult and answer questions in a generic forum'
  version: 1.0.0
  title: Forum api
  termsOfService: ''
  contact:
    email: daniel.lima.nascimento@gmail.com
    name: Daniel Lima do Nascimento
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags: []
paths:
  /questions:
    post:
      tags:
        - question
      summary: Add new question to forum
      description: Method to add new question to forum
      operationId: addQuestion
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema: {}
      security: []
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      parameters:
        - name: user
          in: query
          required: true
          schema:
            type: string
          description: User who asked the question.
        - name: text
          in: query
          required: false
          schema:
            type: string
          description: Question text.
        - name: answer
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
          description: Pass empty
    get:
      summary: 'Get all questions '
      description: ''
      parameters: []
      operationId: getAllQuestions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {}
      tags:
        - questions
  /answer:
    post:
      summary: Add answer to a question
      description: ''
      parameters:
        - name: parent_id
          in: query
          required: true
          schema:
            type: string
          description: Question id
        - name: user
          in: query
          required: true
          schema:
            type: string
          description: User who answered the question.
        - name: text
          in: query
          required: true
          schema:
            type: string
          description: Answer text.
      operationId: addAnswer
      responses:
        '200':
          description: Susscess
          content:
            application/json:
              schema: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema: {}
      tags:
        - answers
components:
  schemas: {}
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
              category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                xml:
                  name: Category
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  name: photoUrl
                  wrapped: true
                items:
                  type: string
              tags:
                type: array
                xml:
                  name: tag
                  wrapped: true
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                  xml:
                    name: Tag
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: Pet
        application/xml:
          schema:
            type: object
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
              category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                xml:
                  name: Category
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  name: photoUrl
                  wrapped: true
                items:
                  type: string
              tags:
                type: array
                xml:
                  name: tag
                  wrapped: true
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                  xml:
                    name: Tag
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: Pet
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                username:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone:
                  type: string
                userStatus:
                  type: integer
                  format: int32
                  description: User Status
              xml:
                name: User
      description: List of user object
      required: true
  securitySchemes: {}
  links: {}
  callbacks: {}
security: []
